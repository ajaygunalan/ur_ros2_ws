function plotCatheterBase(sys_ab_struct, sys_c_struct, input_time_vec, varargin)
	p = inputParser();

	addParameter(p, 'outputImgFileBaseName', '_phant_01.png', @ischar);
	addParameter(p, 'outputImgDirName', fullfile('.', 'img'), @ischar);
	addParameter(p, 'ptSrcAxialLimits', [20e-3, 40e-3], @isnumeric);
	addParameter(p, 'legendSize', 6, @isnumeric);
	addParameter(p, 'markerSize', 3, @isnumeric);
	addParameter(p, 'saveFile', true, @islogical);
	addParameter(p, 'realTimeSys', 'DetectionNet', @ischar);
	addParameter(p, 'groundTruthDistance', 25e-3, @isnumeric);

	parse(p, varargin{:});

	pt_src_axial_limits = p.Results.ptSrcAxialLimits;
	legend_size = p.Results.legendSize;
	marker_size = p.Results.markerSize;
	real_time_sys = p.Results.realTimeSys;

	robot_id_vec = find(sys_ab_struct.time >= input_time_vec(1) & sys_ab_struct.time <= input_time_vec(2));
	sys_ab_id_vec = find(...
		sys_ab_struct.pt_src_time >= input_time_vec(1) ...
		& sys_ab_struct.pt_src_time <= input_time_vec(2) ...
		& sys_ab_struct.pt_src_p42v_link1(:, 3) >= pt_src_axial_limits(1) ...
		& sys_ab_struct.pt_src_p42v_link1(:, 3) <= pt_src_axial_limits(2));
	sys_c_id_vec = find(...
		sys_c_struct.pt_src_time >= input_time_vec(1) ...
		& sys_c_struct.pt_src_time <= input_time_vec(2) ...
		& sys_c_struct.pt_src_p42v_link1(:, 3, end) >= pt_src_axial_limits(1) ...
		& sys_c_struct.pt_src_p42v_link1(:, 3, end) <= pt_src_axial_limits(2));

	robot_pos_base = [sys_ab_struct.tf_trans(robot_id_vec, :), ones(length(robot_id_vec), 1)];
	sys_ab_pos_base = [sys_ab_struct.pt_src_base_link(sys_ab_id_vec, :), ones(length(sys_ab_id_vec), 1)];
	sys_c_pos_base = [sys_c_struct.pt_src_base_link(sys_c_id_vec, :), ones(length(sys_c_id_vec), 1)];

	tf_base_shifted = [...
		1, 0, 0, -mean(robot_pos_base(:, 1)); ...
		0, 1, 0, -mean(robot_pos_base(:, 2)); ...
		0, 0, 1, -min(robot_pos_base(:, 3)); ...
		0, 0, 0, 1];

	robot_pos_shifted = (tf_base_shifted * robot_pos_base')';
	sys_ab_pos_shifted = (tf_base_shifted * sys_ab_pos_base')';
	sys_c_pos_shifted = (tf_base_shifted * sys_c_pos_base')';

	color_order = get(gca, 'ColorOrder');

	scatter(...
		0, 0, legend_size, ...
		'MarkerEdgeColor', color_order(4, :), 'MarkerFaceColor', color_order(4, :), 'DisplayName', 'Transducer');
	hold on
	scatter(...
		0, 0, legend_size, ...
		'MarkerEdgeColor', color_order(1, :), 'MarkerFaceColor', color_order(1, :), 'DisplayName', 'DetectionNet');
	scatter(...
		0, 0, legend_size, ...
		'MarkerEdgeColor', color_order(2, :), 'MarkerFaceColor', color_order(2, :), 'DisplayName', 'WaveSegNet-1');
	scatter(...
		0, 0, legend_size, ...
		'MarkerEdgeColor', color_order(3, :), 'MarkerFaceColor', color_order(3, :), 'DisplayName', 'WaveSegNet-2');

	robot_left = min(robot_pos_shifted(:, 2));
	ground_truth_distance = p.Results.groundTruthDistance;
	robot_right = robot_left + ground_truth_distance;

	% fill(...
	% 	1e3 .* [robot_left, robot_right, robot_right, robot_left], ...
	% 	[-100, -100, 100, 100], ...
	% 	[0.3010 0.7450 0.9330], ...
	% 	'FaceAlpha', 0.2, ...
	% 	'EdgeColor', [0.3010 0.7450 0.9330], ...
	% 	'DisplayName', 'Ground Truth');

	scatter(...
		1e3 .* robot_pos_shifted(:, 2), 1e3 .* robot_pos_shifted(:, 3), marker_size, ...
		'MarkerEdgeColor', color_order(4, :), 'MarkerFaceColor', color_order(4, :), 'HandleVisibility', 'off');

	if strcmp(real_time_sys, 'DetectionNet')
		real_time_color = 1;
	else
		real_time_color = 2;
	end

	scatter(...
		1e3 .* sys_ab_pos_shifted(:, 2), 1e3 .* sys_ab_pos_shifted(:, 3), marker_size, ...
		'MarkerEdgeColor', color_order(real_time_color, :), 'MarkerFaceColor', color_order(real_time_color, :), ...
		'HandleVisibility', 'off');
	scatter(...
		1e3 .* sys_c_pos_shifted(:, 2), 1e3 .* sys_c_pos_shifted(:, 3), marker_size, ...
		'MarkerEdgeColor', color_order(3, :), 'MarkerFaceColor', color_order(3, :), 'HandleVisibility', 'off');
	% plot(1e3 .* [robot_left, robot_left], [-100, 100], '--k', 'DisplayName', 'Ground Truth');
	% plot(1e3 .* [robot_right, robot_right], [-100, 100], '--k', 'HandleVisibility', 'off');

	plot(...
		1e3 .* robot_left, 1e3 .* sys_c_pos_shifted(1, 3), 'k+', ...
		'MarkerSize', 10, 'DisplayName', 'Ground Truth Start');
	plot(...
		1e3 .* robot_right, 1e3 .* sys_c_pos_shifted(1, 3), 'k>', ...
		'MarkerSize', 10, 'DisplayName', 'Ground Truth End');

	hold off

	if p.Results.saveFile
		legend();

		xlabel('x [mm]');
		ylabel('z [mm]');

		output_img_dir_name = p.Results.outputImgDirName;
		output_img_file_base_name = p.Results.outputImgFileBaseName;
		output_img_file_name = fullfile(output_img_dir_name, ['raw_cath_base', output_img_file_base_name]);
		fprintf(['Saving file ''', output_img_file_name, '''...\n']);
		saveas(gcf, output_img_file_name);
	end

	fprintf(...
		'Axial position range: %.2f-%.2f mm\n', ...
		1e3 .* min(robot_pos_shifted(:, 3)), ...
		1e3 * max(robot_pos_shifted(21:end, 3)));
end
